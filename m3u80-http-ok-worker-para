addEventListener("fetch", event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const url = new URL(request.url);
  const pathname = url.pathname;

  let backendUrl = "";
  if (pathname.startsWith("/http/")) {
    backendUrl = "http://" + pathname.slice(6);
  } else if (pathname.startsWith("/https/")) {
    backendUrl = "https://" + pathname.slice(7);
  } else {
    return new Response("路径错误，应以 /http/ 或 /https/ 开头", { status: 400 });
  }

  // 加上原始参数
  if (url.search) backendUrl += url.search;

  const isM3U8 = backendUrl.includes(".m3u8");

  try {
    const res = await fetch(backendUrl, {
      method: request.method,
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
      }
    });

    let headers = new Headers(res.headers);
    headers.set("Access-Control-Allow-Origin", "*");

    if (isM3U8) {
      let text = await res.text();

      // 拼出 Worker 当前前缀
      const prefix = request.url.replace(/\/[^\/?#]+(\?.*)?$/, "/");

      // 替换所有 ts 文件路径（包含 query 参数）
      text = text.replace(/^([^\n#][^\n]*)$/gm, line => {
        if (line.startsWith("http")) return line;
        // 保留 query 参数部分
        let [file, ...params] = line.split("?");
        let full = prefix + file;
        if (params.length) full += "?" + params.join("?");
        return full;
      });

      headers.set("Content-Type", "application/vnd.apple.mpegurl");
      return new Response(text, { status: 200, headers });
    } else {
      return new Response(res.body, {
        status: res.status,
        headers
      });
    }

  } catch (err) {
    return new Response("代理出错：" + err.message, { status: 502 });
  }
}
